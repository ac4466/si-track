{"version":3,"sources":["layout/Header.tsx","tracker/InitializerOptions.tsx","tracker/modules/Blight.tsx","tracker/modules/Fear.tsx","tracker/Tracker.tsx","App.tsx","index.tsx"],"names":["Header","AppBar","position","Toolbar","playerCountAtom","atom","key","default","InitializerOptions","initialize","useRecoilState","playerCount","setPlayerCount","Dialog","open","DialogTitle","DialogContent","sx","display","justifyContent","ToggleButtonGroup","value","exclusive","onChange","_","ToggleButton","Typography","variant","DialogActions","Button","onClick","Blight","useRecoilValue","useState","remainingBlight","setRemainingBlight","radios","i","push","FormControlLabel","control","Radio","label","Paper","padding","FormLabel","RadioGroup","target","parseInt","shuffle","Fear","fear","setFear","isTrackerInitializedState","Tracker","isInitialized","setIsInitialized","Grid","container","spacing","item","xs","App","Box","width","height","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eee054f8.chunk.js","sourcesContent":["import { AppBar, Toolbar } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst Header: React.FC = () => {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar />\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { atom, useRecoilState } from \"recoil\";\n\nexport const playerCountAtom = atom<number>({\n  key: \"playerCount\",\n  default: 2,\n});\n\nconst InitializerOptions: React.FC<{\n  initialize: () => void;\n}> = ({ initialize }) => {\n  const [playerCount, setPlayerCount] = useRecoilState(playerCountAtom);\n\n  const onChange = (_, value) => {\n    setPlayerCount(value);\n  };\n\n  return (\n    <Dialog open={true}>\n      <DialogTitle>Number of Players</DialogTitle>\n      <DialogContent\n        sx={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <ToggleButtonGroup value={playerCount} exclusive onChange={onChange}>\n          <ToggleButton value=\"2\">\n            <Typography variant=\"h4\">2</Typography>\n          </ToggleButton>\n          <ToggleButton value=\"3\">\n            <Typography variant=\"h4\">3</Typography>\n          </ToggleButton>\n          <ToggleButton value=\"4\">\n            <Typography variant=\"h4\">4</Typography>\n          </ToggleButton>\n        </ToggleButtonGroup>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={initialize}>Start</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default InitializerOptions;\n","import {\n  FormControlLabel,\n  FormLabel,\n  Paper,\n  Radio,\n  RadioGroup,\n} from \"@material-ui/core\";\nimport shuffle from \"lodash/shuffle\";\nimport React, { useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { playerCountAtom } from \"../InitializerOptions\";\n\nconst HEALTHY_BLIGHT_PER_PLAYER = 2;\n\nconst Blight: React.FC = () => {\n  const playerCount = useRecoilValue(playerCountAtom);\n\n  const [remainingBlight, setRemainingBlight] = useState<number>(\n    playerCount * HEALTHY_BLIGHT_PER_PLAYER\n  );\n\n  const onChange = ({ target: { value } }) => {\n    setRemainingBlight(parseInt(value));\n  };\n\n  const radios: Array<JSX.Element> = [];\n  for (let i = 0; i <= playerCount * HEALTHY_BLIGHT_PER_PLAYER; i++) {\n    radios.push(\n      <FormControlLabel key={i} value={i} control={<Radio />} label={i} />\n    );\n  }\n\n  return (\n    <Paper variant=\"outlined\" sx={{ padding: \"20px\" }}>\n      <FormLabel>Remaining Blight</FormLabel>\n      <RadioGroup value={remainingBlight} onChange={onChange}>\n        {shuffle(radios)}\n      </RadioGroup>\n    </Paper>\n  );\n};\n\nexport default Blight;\n","import {\n  FormControlLabel,\n  FormLabel,\n  Paper,\n  Radio,\n  RadioGroup,\n} from \"@material-ui/core\";\nimport shuffle from \"lodash/shuffle\";\nimport React, { useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { playerCountAtom } from \"../InitializerOptions\";\n\nconst FEAR_PER_PLAYER = 4;\n\nconst Fear: React.FC = () => {\n  const playerCount = useRecoilValue(playerCountAtom);\n\n  const [fear, setFear] = useState<number>(0);\n\n  const onChange = ({ target: { value } }) => {\n    setFear(parseInt(value));\n  };\n\n  const radios: Array<JSX.Element> = [];\n  for (let i = 0; i <= playerCount * FEAR_PER_PLAYER; i++) {\n    radios.push(\n      <FormControlLabel key={i} value={i} control={<Radio />} label={i} />\n    );\n  }\n\n  return (\n    <Paper variant=\"outlined\" sx={{ padding: \"20px\" }}>\n      <FormLabel>Current Fear</FormLabel>\n      <RadioGroup value={fear} onChange={onChange}>\n        {shuffle(radios)}\n      </RadioGroup>\n    </Paper>\n  );\n};\n\nexport default Fear;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { atom, useRecoilState } from \"recoil\";\nimport InitializerOptions from \"./InitializerOptions\";\nimport Blight from \"./modules/Blight\";\nimport Fear from \"./modules/Fear\";\n\nconst isTrackerInitializedState = atom<boolean>({\n  key: \"isTrackerInitialized\",\n  default: false,\n});\n\nconst Tracker: React.FC = () => {\n  const [isInitialized, setIsInitialized] = useRecoilState(\n    isTrackerInitializedState\n  );\n\n  if (!isInitialized) {\n    return (\n      <InitializerOptions\n        initialize={() => {\n          setIsInitialized(true);\n        }}\n      />\n    );\n  }\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={6}>\n        <Fear />\n      </Grid>\n      <Grid item xs={6}>\n        <Blight />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Tracker;\n","import { Box } from \"@material-ui/core\";\nimport React from \"react\";\nimport { RecoilRoot } from \"recoil\";\nimport Header from \"./layout/Header\";\nimport Tracker from \"./tracker/Tracker\";\n\nconst App: React.FC = () => {\n  return (\n    <RecoilRoot>\n      <Box width=\"100%\" height=\"100%\">\n        <Header />\n        <Tracker />\n      </Box>\n    </RecoilRoot>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}